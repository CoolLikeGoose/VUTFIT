/**
 * \mainpage Izg project.
 *
 * \section zadani Zadání projektu do předmětu IZG.
 *
 * \tableofcontents
 *
 * \image html resources/images/vystup.png
 * \image html resources/images/teaser.svg  width=1000
 * \image html resources/images/output.png "Takto by měl vypadat výstup projektu"
 *
 * Vašim úkolem je naimplementovat jednoduchou grafickou kartu (gpu).
 * A dále implementovat funkci pro vykreslení modelů.
 * Všechny soubory, které se vás týkají jsou ve složce student/
 * V souboru student/gpu.cpp implementujte funkci \ref izg_enqueue - funcionalita vámi implementované grafické karty.
 * V souboru student/prepareModel.cpp implementujete funkce \ref prepareModel, \ref drawModel_vertexShader a \ref drawModel_fragmentShader.
 * Tyto funkce slouží pro zpracování načteného souboru s modelem do paměti grafické karty a command bufferu.
 * Kromě toho se ve složce nachází ještě soubor student/fwd.hpp - ten obsahuje deklarace struktur a konstant.
 *
 * \section jakNaTo Jak na projekt?
 *
 * Projekt se může zdát z prvu obrovský s milioném souborů a všelijakých podivností.
 * Tyto "podivnosti" ale nemusíte řešit.
 * Vše, co se vás týká jsou v podstatě 2 soubory do kterých napíšete váš kód a jeden soubor s deklaracemi struktur pro referenci.
 * Projekt okolo těchto souborů vypadá takto z mnoha důvodů (vytvoření okna, načítaní modelů, testování, ...).
 * A není potřeba se jim zabývat (tedy pokud nechcete vidět vnitřnosti a jak celý projekt funguje).
 * Takže jak na to?<br>
 * Nejprve si vyzkoušejte, jak by to mělo vypadat...
 * \code{.sh}
 * # a mackejte "n" nebo "p" a ovladani mysi
 * izgProject_windows.exe
 * izgProject_windows.exe --method 18
 * izgProject_windows.exe --method 17 --model resources\\models\\thebes_palace\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\tf2\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\china\\china.glb
 * izgProject_windows.exe --method 17 --model resources\\models\\glorious_duck\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\nyra\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\peace\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\triss\\scene.gltf
 * izgProject_windows.exe --method 17 --model resources\\models\\eifel\\scene.gltf
 *
 * # a mackejte "n" nebo "p" a ovladani mysi
 * ./izgProject_linux.bin 
 * ./izgProject_linux.bin --method 18
 * ./izgProject_linux.bin --method 17 --model resources/models/thebes_palace/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/tf2/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/china/china.glb
 * ./izgProject_linux.bin --method 17 --model resources/models/glorious_duck/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/nyra/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/peace/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/triss/scene.gltf
 * ./izgProject_linux.bin --method 17 --model resources/models/eifel/scene.gltf
 * \endcode
 * Jak je to složité? Můj kód pro izg_enqueue má ~600 řádků a implementace prepareModel a shaderů ~100 řádku.
 * Není potřeba nic alokovat, pamět je již předchystaná. Takže pokud budete někde volat malloc, new a podobně, zamyslete se.
 * Z C++ se nevyužívá skoro nic (jen vector a knihovna glm, reference). Takže by to mělo jít napsat celkem v pohodě i pro C lidi.
 * 
 * <ol>
 * <li> Vyzkoušet si přiložený zkompilovaný referenční projekt izgProject_linux.bin a izgProject_windows.exe. (mačkejte "n" nebo "p", když projekt pustíte, abyste přepínali zobrazované metody).
 * <li> \ref sestaveni "Zprovoznit si překlad"
 * <li> \ref spousteni "Zkusit si projekt pustit a podívat se naparametry příkazové řádky." a \ref ovladani "jak se aplikace ovládá"
 * <li> V projektu jsou přítomy \ref testovani "akceptační testy", které vám řeknou, jestli jede správným směrem a taky vypisují napovědu.
 * <li> Začít implementovat funkci \ref izg_enqueue a kontrolovat váš postup podle přiložených testů.
 * <li> Začít implementovat funkci \ref prepareModel
 * <li> Začít implementovat funkci \ref drawModel_vertexShader
 * <li> Začít implementovat funkci \ref drawModel_fragmentShader
 * <li> Ověřte si implementaci na merlinovi
 * <li> \ref odevzdavani Odevzdejte
 * <li> ???
 * <li> profit
 * </ol>
 *
 * Každý úkol má přiřazen akceptační test, takže si můžete snadno ověřit funkčnosti vaší implementace.
 * <br><br>
 * Úkoly lze rozdělit do dvou částí: implementace grafické karty a implementace kreslení modelů se stíny.
 *
 * \section izg_enqueueSec Implementace grafické karty - soubor student/gpu.cpp
 * První věc, na co se asi ptáte: "Jak vypadá počítač", "Jak vypadá grafická karta, jak se s ní komunikuje a co je její chování?"<br>
 * Cílem této části je tvorba grafické karty. Chtěli jste si někdy vytvořit grafickou kartu? Ne?
 * A chcete alespoň vědět, jak se vykreslují počítačové hry a jak funguje svět real-time počítačové grafiky?
 * Základem je počítač s procesorem a grafickou kartou:
 * \image html resources/images/cpu_gpu.svg "Přehled toho, jak vypadá počítač. S grafickou kartou se komunikuje pomocí fronty příkazů, po které se posílají balíčky práce - Command Buffery."  width=800
 * Jak je vidět, tak s grafickou kartou se komunikuje pomocí fronty příkazů (v tomto projektu není), po které se posílají balíčky práce.
 * Balíček práce (\ref CommandBuffer) v sobě obsahuje mnoho úkolů, které má grafická karta provést.
 * \image html resources/images/commandBuffer.svg "Balíček práce - Command Buffer. Command buffer obsahuje příkazy pro grafickou kartu. Může jich být mnoho, třeba pro vykreslení celého modelu."  width=150
 * Koncept command bufferu lze najít například ve Vulkánu: <a href="https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html">CommandBuffer</a>.
 * Balíček práce se vždy provede nad pamětí grafické karty.
 * Toto fungování grafické karty je zajištěno (bude, až to naprogramujete) funkcí \ref izg_enqueue.
 *
 * Funkce \ref izg_enqueue se nachází v student/gpu.cpp.
 * Je to funkce, která reprezentuje chování grafické karty.
 * Lze pomocí ní kreslit trojúhelníky, mazat framebuffer, nastavovat číslo vykreslovacího příkazu nebo nastavovat aktivní objekty.
 * \snippet student/gpu.cpp izg_enqueue
 * Vašim úkolem je ji postupně naprogramovat.
 * Na jeden pokus ji nenaprogramujete, budete ji programovat postupně.
 * Doporučuji si kousky funkce dávat do vlastních podfunkcí, ať máte kód přehledný.<br>
 * <br>
 * Funkce \ref izg_enqueue bere dva vstupní parametry:
 * <ul>
 * <li> paměť grafické karty \ref GPUMemory, nad kterou jsou vykonávány všechny operace,
 * <li> \ref CommandBuffer - seznam operací k provedení.
 * </ul>
 * 
 * Paměť grafické karty:
 * \image html resources/images/GPUMemory.svg "Struktura paměti grafické karty je složena z několika objektů a čísel. Do framebufferů se kreslí, programy říkají, jak věci kreslit, vertex array říká, kde a jak jsou uloženy data, buffery jsou data, textury jsou obrázky, uniformy jsou konstanty pro programy, gl_DrawID je číslo vykresovacího příkazu, a proměnné activated* slouží pro výběr objektů, které jsou v daný moment aktivní."  width=600
 * Výpis \ref GPUMemory ze souboru student/fwd.hpp
 * \snippet student/fwd.hpp GPUMemory
 * Operace v command bufferu:
 * \image html resources/images/commandTypes.svg "Příkazy jsou uloženy v CommandBufferu. Příkaz může být sedmi druhů. Čistící příkaz čistí aktivovaný framebuffer, kreslící příkaz kreslí s využitím aktivovaného programu a vertex array do aktivovaného framebufferu, setDrawID nastavuje číslo kreslícího příkazu, bindFramebuffer volí, který framebuffer je aktivní, bindProgram volí, který program je aktivní, bindVertexArray volí, který vertex array objekt je aktivní a subCommand obsahuje odkaz na další CommandBuffer."  width=600
 * Výpis \ref CommandBuffer ze souboru student/fwd.hpp
 * \snippet student/fwd.hpp CommandBuffer
 *
 * Jak můžete vidět, obsahuje tři položky: maximální počet příkazů, který může být uložen, počet uložených příkazů a samotné příkazy.<br>
 * Naše grafická karta umožňuje několik druhů práce:
 * <ul>
 * <li> čistění framebufferu,
 * <li> kreslení do framebufferu,
 * <li> nastavování čísla kreslícího příkazu,
 * <li> navázání aktivního framebufferu,
 * <li> navázání aktivního shader programu,
 * <li> navázání aktivního vertex array objektu,
 * <li> sub command.
 * </ul>
 * Struktura samotného příkazu vypadá takto:
 * \snippet student/fwd.hpp Command
 * Je složena z typu a dat. Typ je enum:
 * \snippet student/fwd.hpp CommandType
 * A data je union:
 * \snippet student/fwd.hpp CommandData
 * Union je něco jako struktura až na to, že jeho velikost je daná největší komponentou.
 * Data unionu jsou uložena přes sebe a je možné uložit jen jednu komponentu.
 * Vzhledem k tomu, že jsem projekt psal v C++, je přítomen i konstruktor, ale toho si nemusíte všímat, jen udává, na co bude union inicializovaný - na draw command.
 * Union obsahuje příkaz pro čistění framebuffer nebo kreslení.
 * \subsection ClearCommandTask 1. Úkol - Obsluha command bufferu - čistění framebuffer
 * Vašim prvním úkolem bude naprogramovat obsluhu command bufferu.
 * Nejprve zprovozněte čistění framebufferu (\ref Framebuffer).
 * K tomuto úkolu se váže test 0 a 1 (je uvedeno jen Linuxové spouštění testů, na windows je to velmi obdobné):<br>
 * \code{.sh}
 * ./izgProject -c --test 1 --up-to-test
 * \endcode
 * Framebuffer je složen ze dvou bufferů: paměť barvy (color buffer) a paměť hloubky (depth buffer):
 * \image html resources/images/framebuffer.svg "Framebuffer - dva buffery: color buffer a depth buffer o stejném rozlišení. Framebuffer je plátno, kam se kreslí."  width=400
 * Oba dva mají stejné rozlišení.
 * Barevný buffer má několik kanálů (až čtyři), každý má stejnou velikost a typ.
 * Hlouboký buffer má hloubku uloženou ve floatech.
 * Framebuffer je koncipován tak, že pixel na souřadnicích [0,0] je v levém dolním rohu, osa X je doprava a oxy Y nahoru.
 * Je možné jej přetočit vzhůru nohama pomocí příznaku \ref Framebuffer::yReversed.
 * \image html resources/images/yReversed.svg "Framebuffer může být překlopený vzhůru nohama. Je to určeno komponentou yReversed. V taktovém případě je nultý pixel v levém horním rohu framebufferu."  width=400
 * 
 * Všechny framebuffery se nachází v paměti grafické karty (\ref GPUMemory):
 * \snippet student/fwd.hpp Framebuffer
 * Framebuffer je poměrně složitá struktura. Je složena ze:
 * <ul>
 * <li> dva \ref Image - barva a hloubka,
 * <li> šířka,
 * <li> výška,
 * <li> yReversed - v případě, že je framebuffer vzhůru nohama.
 * </ul>
 * \ref Image je struktura obsahující 2D data.
 * Je využívána u framebufferů a textur.
 * \snippet student/fwd.hpp Image
 * Image je inspirovaný strukturami
 * <a href="https://wiki.libsdl.org/SDL2/SDL_Surface">SDL_Surface</a> a
 * <a href="https://wiki.libsdl.org/SDL2/SDL_PixelFormat">SDL_PixelFormat</a>.<br>
 * Struktura obsahuje několik položek:
 * <ul>
 * <li> Channel - enum typu kanálů,
 * <li> Format - enum formátu kanálů,
 * <li> data - ukazatel na začátek,
 * <li> channels - počet kanálů,
 * <li> format - formát kanálů,
 * <li> channelTypes - tabulka mapování čísla kanálu na typ kanálu,
 * <li> pitch - šířka řádku v bajtech,
 * <li> bytesPerPixel - velikost jednoho pixelu v bajtech.
 * </ul>
 Adresování dat může být poněkud komplikované...
 * \code{.cpp}
 // Pixel [x,y] začíná na adrese:
 uint8_t* pixelStart = ((uint8_t*)data) + y*pitch + x*bytesPerPixel;

 // Pokud jsou data typu float
 if(format == Image::FLOAT32){
   float*pixelf = (float*)pixelStart;

   // Kanál 0 odpovídá barvě channelTypes[0]
   // tzn. 0 nemusí být RED
   pixelf[0] = 0.5f;
 }
 // Pokud jsou data typu uint8_t
 if(format == Image::UINT8){
   uint8_t*pixelu = (uint8_t*)pixelStart;
   pixelu[0] = 127;
 }
 * \endcode
 *
 * Čistící příkaz (\ref ClearCommand) vypadá takto:
 * \snippet student/fwd.hpp ClearCommand
 * Čistící příkaz obsahuje barvu, hloubku a příznaky zda se má čistit paměť barvy a hloubky.
 * Všimněte si, že barva je uložena jako floatový vektor glm::vec4.
 * V tomto vektoru je barva v rozsahu [0,1] typu float.
 * Čistící barvu musíte z toho rozsahu převést na správný typ podle typu barevného bufferu.<br>
 *
 * Takto vypadá pseudokód, jak můžete začít psát:
 * \snippet student/drawExample.cpp izg_enqueue_commands
 * 
 * Prosím, dejte se do práce.
 * \subsubsection clear Test 0 - čištění framebufferu
 * \code{.sh}
 * ./izgProject -c --test 0
 * \endcode
 * Tento test zkouší vyčistit framebuffer.
 * \subsubsection clearPartial Test 1 - čištění částečného framebufferu
 * \code{.sh}
 * ./izgProject -c --test 0
 * \endcode
 * Tento test zkouší vyčistit částečně specifikovaný framebuffer.
 * Paměť barvy i paměť hloubky může být prázdná (nullptr), v takovém případě čištění neproběhne.
 *
 * \subsection BindTask 2. Úkol - Obsluha command bufferu - aktivování objektů
 * Cílem této části je správně aktivovat objekty. Vážou se k tomu tyto testy:
 * \code{.sh}
 * ./izgProject -c --test 5 --up-to-test
 * \endcode
 * Opět editujete funkci \ref izg_enqueue v souboru student/fwd.hpp.<br>
 * \subsubsection activateTheory Teorie
 * Grafická karta obsahuje mnoho objektů.
 * Jsou to:
 * <ul>
 * <li> textury,
 * <li> buffery,
 * <li> programy,
 * <li> framebuffery,
 * <li> vertex array objekty,
 * <li> uniformy a další.
 * </ul>
 * Některé z těchto objektů se přímo využívají při kreslení. Jsou to objekty:
 * <ul>
 * <li> framebuffery,
 * <li> programy,
 * <li> vertex array objekty.
 * </ul>
 * Je potřeba vědět, kam se kreslí (\ref Framebuffer), je potřeba vědět jak se kreslí (\ref Program) a je potřeba vědět, odkud se berou data pro kreslení (\ref VertexArray).
 * \image html resources/images/ctx_overview.svg "Přehled objektů, které se přímo účastní při vykresování. VertexArray je něco jako vstup pro vykreslování, jsou v něm 'zakódované' trojúhelníky. Framebuffer je výstupní obrázek, který se kreslí. A program popisuje, jak se věci kreslí."  width=800
 * Síla dnešních grafických karet spočívá v jejich programovatelnosti a široké nastavitelnosti.
 * Dnes je možné kreslit to vícero framebufferů, využívat k tomu tisíce programů a mít k tomu milióny objektů.
 * Proto je nutné grafické kartě říct, které objekty jsou v danou chvíli aktivní.
 * V OpenGL se to provádí příkazy:
 * <ul>
 * <li> <a href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindFramebuffer.xhtml">glBindFramebuffer</a>
 * <li> <a href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/glUseProgram.xhtml">glUseProgram</a>
 * <li> <a href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindVertexArray.xhtml">glBindVertexArray</a>
 * </ul>
 * Podobně je to ve Vulkánu, ale je to tam složitější.<br>
 * \subsubsection bindFBO Test 2 - bindFramebuffer
 * \code{.sh}
 * ./izgProject -c --test 2
 * \endcode
 * Tento test zkouší, zda funguje command \ref BindFramebufferCommand
 * \snippet student/fwd.hpp BindFramebufferCommand
 * Pokud se v command bufferu objeví tento příkaz, je nutné nastavit aktivní framebuffer v paměti gpu: \ref GPUMemory::activatedFramebuffer.
 *
 * \subsubsection bindProgram Test 3 - bindProgram
 * \code{.sh}
 * ./izgProject -c --test 3
 * \endcode
 * Tento test zkouší, zda funguje command \ref BindProgramCommand
 * \snippet student/fwd.hpp BindProgramCommand
 * Pokud se v command bufferu objeví tento příkaz, je nutné nastavit aktivní program v paměti gpu: \ref GPUMemory::activatedProgram.
 *
 * \subsubsection bindVBO Test 4 - bindVertexArray
 * \code{.sh}
 * ./izgProject -c --test 4
 * \endcode
 * Tento test zkouší, zda funguje command \ref BindVertexArrayCommand
 * \snippet student/fwd.hpp BindVertexArrayCommand
 * Pokud se v command bufferu objeví tento příkaz, je nutné nastavit aktivní vertex array v paměti gpu: \ref GPUMemory::activatedVertexArray.
 *
 * \subsubsection clearMultipleFBO Test 5 - zápis do vícero framebufferů
 * \code{.sh}
 * ./izgProject -c --test 5
 * \endcode
 * Tento test zkouší čistit různé framebuffer, ne jen nultý.
 * Čistící příkaz čistí aktivní framebuffer.
 * 
 * \subsection drawCmdTask 3. Úkol - kreslící příkazy, jejich číslování a další příkazy
 * Cílem této části je správně spouštět kreslící příkazy, číslovat je a obsluhovat další příkazy. Vážou se k tomu tyto testy:
 * \code{.sh}
 * ./izgProject -c --test 10 --up-to-test
 * \endcode
 * Opět editujete funkci \ref izg_enqueue v souboru student/fwd.hpp.<br>
 * \subsubsection drawCmdTheory Teorie
 * Grafická karta je navržena tak, aby se minimalizovaly přenosy CPU <-> GPU.
 * Je to z toho důvodu, že PCIe sběrnice je oproti všem částem nejpomalejší.
 * Snažíme se o to, aby se používalo menší množství větších přenosů data mezi CPU <-> GPU.
 * Velké množství malých přenosů je neefektivní a způsobuje čekání jak na straně CPU, tak na straně GPU.
 * Další věcí, která způsobuje zpomalování kreslení je velké množství samostatných vykresovacích příkazů.
 * Je lepší jedním příkazem vykreslit milión trojúhelníků než miliónem příkazů vykreslit stejný milión trojúhelníků po jedom.
 * Z těchto důvodů vzniky command buffery a další techniky.
 * Dnes je možné pomocí jednoho příkazu vykreslit celou scénu i s mnoha efekty.
 * Příkladem nechť je funkce z OpenGL <a href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawElementsIndirect.xhtml">glDrawElementsIndirect</a>.
 * Nastává však jeden problém.
 * Pokud se vše vykreslí pomocí jednoho volání, jak se každému objektu nastaví správná barva, pozice a materiál?<br>
 * V OpenGL i ve Vulkánu se to řeší pomocí číslování vykreslovacích příkazů <a href="https://www.khronos.org/opengl/wiki/Vertex_Shader/Defined_Inputs">gl_DrawID</a>.
 * Pomocí tohoto čísla je možné typicky v shader programu vybrat správnou modelovou matici, materiál a jiné vlastnosti.
 * Ale co je to vůbec shader program, kde se berou data a jak vůbec funguje vykresování?
 * A co je to vykreslovací řetězec a jak funguje?<br><br>
 * Cílem následujícího výkladu je přiblížit fungování grafické karty.<br>
 *
 * <h3>Grafická karta</h3>
 * Hlavním účelem grafické karty je převod vektorové grafiky na rastrovou.
 * \image html resources/images/pipeline_overview.svg "Grafická karta je složena z paměti a zobrazovacího řetězce. Z paměti tečou vrcholy a trojúhelníky, které jsou vyrasterizovány zpět do paměti."  width=800
 * Data se čtou z paměti, pak se zpracují zobrazovacím řetězcem (ve kterém běží programy) a výsledek se opět zapíše do paměti.
 * Zobravací řetězec je složitý, lze rozdělit na tři části: vektorová část, rasterizace a rastrová část.
 * Akce/příkaz kreslení operuje nad pamětí:
 * \image html resources/images/ctx_overview.svg "Vstup, proces, výstup - tak vypadá vykresovací příkaz."  width=800
 * Příkaz kreslení je prováděn stejně jako příkaz čistění v grafické kartě.
 * Proces kreslení na grafické kartě probíhá v zobrazovacím řetězci.<br>
 * 
 * <h3>Zobrazovací řetězec</h3>
 * Zobrazovací řetězec je složen ze tří částí: vektorová část, rasterizace, rastrová část.
 * \image html resources/images/pipeline_vector_raster.svg "Zobrazovací řetězec je složen z vektorové a rastrové části mezi kterými leží rasterizace."  width=800
 * Úkolem vektorové části je transformovat vektorovou grafiku, posouvat trojúhelníky a podobně.
 * Úkolem raterizace je vektorové elementy převést na rastr.
 * Úkolem frastrové části je obarvit vyrastrované vektory.<br>
 * Část rasterizace a dál nás v tomto úkolu nezajímá, to až později.
 * Tento test je zaměřený na vektorovou část a to jen na její vstup a vertex shader.
 * <h3>Vektorová část zobrazovací řetězec</h3>
 * Cílem vektorové části je zpravovávat vektorovou grafiku: body, trojúhelníky.
 * Většinou se tím myslí: čtení z paměti a sestavení vrcholů, vyvolání vertex shaderu nad každým vrcholem, sestavení trojúhelníků, ořez, perspektivní dělení a připravení pro rasterizaci (viewport transformace).
 * Rasterizace rasterizuje připravené trojúhelníky a produkuje fragmenty (čtvercové úlomky trojúhelníku, které se nakonec zapíšou do framebufferu).
 * Cílem rastrové části je obarvit tyto fragmenty pomocí fragment shaderu, odfiltrovat fragmenty, které jsou příliš daleko (depth test) a smíchat je s framebufferem (blending).<br>
 * Ze začátku implementace kreslení se budete zabývat pouze vektorovou částí - a to částí před vertex shaderem (včetně).
 * \image html resources/images/pipeline_vector.svg "Vektorová část je složena z vertex assembly jednotky, vertex processoru a části za vertex shaderem."  width=800
 * Vertex assembly jednota se stará o sestavování vrcholů. Vertex processor tyto vrcholy "prožene" uživatelem specifikovaným vertex shaderem.
 * Část za vertex shaderem se stará o sestavení trojúhelníku, jeho ořezu a ztransformování pro rasterizaci.<br>
 * <h3>Vertex Processor</h3>
 * Úkolem vertex processoru je pouštět uživatelem specifikovaný vertex shader. Obvykle provádí transformace vrcholů pomocí transformačních matic.
 * Vertex processor vykonává shader (kus programu), kterému se říká vertex shader.
 * Vstupem vertex shaderu je vrchol \ref InVertex, výstupem je vrchol \ref OutVertex.
 * Dalším (konstatním) vstupem vertex shaderu jsou uniformní proměnné a textury \ref ShaderInterface, které jsou uložené v rámci shader programu.
 * Pokud se uživatel rozhodne vykreslit 5 trojúhelníků je vertex shader spuštěn \f$ 5 \cdot 3 = 15 \f$.
 * Jednotlivé spuštění (invokace) vertex shaderu vyžadují nové vstupní vrcholy a produkují nové výstupní vrcholy.
 * To ve výsledku znamená, že se pro každou invokaci vertex shaderu spustí Vertex Assembly jednotka, která sestaví vstupní vrchol.
 * \image html images/vertexShader.svg "Vizualizace vstupů a výstupů vertex procesoru. Ve vertex procesoru běží vertex shader, který obdrží vstupní vrchol, vyprodukuje výstupní vrchol a obdrží vstupní konstanty (uniformní proměnné a textury a číslo vykreslovacího příkazu)." width=800
 *
 * \subsubsection drawCmdPractice Test 6 - spouštění vertex shaderu
 * A teď práce. Úkol je zprovoznit spouštění vertex shaderu.
 * K tomtu se váže testy 6<br>
 * \code{.sh}
 * ./izgProject -c --test 6
 * \endcode
 * Při kreslení musíte zavolat vertex shader tolikrát, kolik je zadáno v kreslícím příkazu (\ref DrawCommand).
 * Kreslící příkaz je struktura:
 * \snippet student/fwd.hpp DrawCommand
 * Struktura obsahuje počet vertexů pro vykreslení a číslo programu, který by se měl využít.
 * Programy se nachází v paměti grafické karty \ref GPUMemory.
 * \snippet student/fwd.hpp GPUMemory
 * Program je opět struktura:
 * \snippet student/fwd.hpp Program
 * Struktura programu obsahuje vertex shader.
 * Vertex shader je v ukazatel na funkci. Na normální GPU se jedná o program (třeba v GLSL), který se kompiluje.
 * V projektu je to normální C/C++ funkce, která je uložena v ukazateli na funkci.
 * Vertex shader bere 3 parametry
 * \snippet student/fwd.hpp VertexShader
 * V tomto testu se neřeší, co dostane, ale měl by něco dostat.
 *
 * \subsubsection drawIdPractice Testy 7-8 - číslování kreslících příkazů - gl_DrawID
 * \code{.sh}
 * ./izgProject -c --test 7
 * ./izgProject -c --test 8
 * \endcode
 * Jelikož může command buffer obsahovat vícero kreslících příkazů, je nutné je číslovat.
 * Toto číslování se používá pro výběr materiálů, textur, modelových matic a podobně.
 * Číslují se jen vykreslovací příkazy a to pomocí čísla gl_DrawID.
 * Toto číslo je součastí struktury ShaderInterface:
 * \snippet student/fwd.hpp ShaderInterface
 * ve které je položka \ref ShaderInterface::gl_DrawID, což je číslo vykreslovacího příkazu, které musíte správně nastavit.
 * Kreslící příkazy v command bufferu by měly dostat čísla 0,1,2,...<br>
 * Pokud je mezi kreslícími jiný příkaz, neovlivní to číslování.
 * Výjimkou je příkaz \ref SetDrawIdCommand, který umožňuje explicitně gl_DrawID nastavit.
 * \image html images/gl_DrawID.svg "Pouze kreslící příkazy jsou číslovány. SetDrawId může explicitně nastasvit číslo příkazu. Je jedno, zda jsou příkazy součástí SubCommand, číslování to neovlivní." width=600
 * Hrubý pseudokód může vypadat nějak takto:
 * \snippet student/drawExample.cpp izg_enqueue_before_vs
 *
 *
 * \subsubsection subCmdPractice Testy 9-10 - sub command a mix příkazů
 * Testy:
 * \code{.sh}
 * ./izgProject -c --test 9
 * ./izgProject -c --test 10
 * \endcode
 * Sub command je způsob, jak rozšiřovat a větvit command buffer. Sub command obsahuje ukazatel na další command buffer.
 * \snippet student/fwd.hpp SubCommand
 * Koncept je podobný jako u sekundárních command bufferů ve Vulkánu: <a href="https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#commandbuffers-secondary">Sekundární Command Buffer</a>.
 * Příkladem využití \ref SubCommand v tomto projektu je vykreslování stínů.
 * Technika vykreslování stínů vyžaduje vykreslit scénu 2x, pokaždé s jiným programem a framebufferem.
 * Je tak možné uložit si command buffer pro vykreslení scény a ten pak dvakrát použít v sub commandu celého snímku.
 * 
 *
 * \subsection VertexAssembly 4. Úkol - Kreslení - číslování vrcholů a vertex assembly jednotka
 * Testy:
 * \code{.sh}
 * ./izgProject -c --test 16 --up-to-test
 * \endcode
 * Další částí úkolů je zprovoznění číslování vrcholů a vertex assembly jednotky.
 *
 * \subsubsection gl_VertexID Test 11 - Číslování vrcholů
 * \code{.sh}
 * ./izgProject -c --test 11
 * \endcode
 * Obdobně jako číslování kreslících příkazů, existuje i číslování vrcholů.
 * V tomto testu musíte správně číslovat vstupní vrcholy do vertex shaderu.
 * Zatím bude stačit pořadové číslo.
 * Vstupní vrchol se nachází ve struktuře InVertex
 * \snippet student/fwd.hpp InVertex
 * ve které je položka \ref InVertex::gl_VertexID, což je číslo vrcholu, kterou musíte správně nastavit.

 * \subsubsection gl_VertexIDIndex32 Test 12 - Číslování vrcholů s indexováním.
 * \code{.sh}
 * ./izgProject -c --test 12
 * \endcode
 * V tomto testu musíte správně číslovat vstupní vrcholy, když je zapnuté indexování.<br>
 * <b>Indexované kreslení</b> je způsob snížení redundance dat s využitím indexů na vrcholy.
 * \image html images/drawElements.svg "Neindexované a indexované kreslení."

 * U neindexovaného kreslení je číslo vrcholu \ref InVertex::gl_VertexID rovno číslu invokace vertex shaderu.
 * U indexovaného kreslení je číslo vrcholu \ref InVertex::gl_VertexID rovno hodnodě z indexačního bufferu.
 * Hodnota z indexačního bufferu je vybrána číslem invokace vertex shaderu.
 * <br>
 * Indexování může být zapnuto nebo vypnuto - o tom rozhoduje vykresovací příkaz:
 * \snippet student/fwd.hpp DrawCommand
 * V paměti grafické karty je pole vertex array objektů \ref GPUMemory::vertexArrays.
 * Každý vertex array je tabulka nastavení takzvané vertex assembly jednotky.
 * Struktura VertexArray vypadá následnovně:
 * \snippet student/fwd.hpp VertexArray
 * V této struktuře jsou pro indexovaní podstatné položky \ref VertexArray::indexBufferID, \ref VertexArray::indexOffset a \ref VertexArray::indexType.
 * indexBufferID je číslo bufferu nebo -1 pokud je indexing vypnutý.
 * indexOffset je posun v bajtech od začátku bufferu, kde se nacházejí indexy.
 * indexType je typ indexu.<br>
 * Všechny buffery (stejně jako programy) se nachází v paměti grafické karty (GPUMemory).
 * \snippet student/fwd.hpp GPUMemory
 * Buffer je lineární paměť, reprezentovano strukturou:
 * \snippet student/fwd.hpp Buffer
 * 
 * Indexační buffer může mít růzou velikost indexu - 8bit, 16bit a 32bit:
 * \snippet student/fwd.hpp IndexType
 * Pokud je zapnuto indexování, pak je číslo vrcholu dáno položkou v indexačním bufferu, kde je 
 * položka (index) v bufferu vybrána na základě čísla invokace vertex shaderu.

 * \subsubsection VSUniforms Test 13 - Vertex shader by měl dostat konstanty z paměti.
 * \code{.sh}
 * ./izgProject -c --test 13
 * \endcode
 * Uniformní proměnné a textury jsou z pohledu vertex shaderu konstanty.
 * Jsou to data, která uživatel dodal svému vertex shaderu.
 * Obvykle jsou to matice, pozice světla, barva materiálu...
 * Všechny uniformní proměnné a textury jsou uloženy v paměti grafické karty (GPUMemory).
 * \snippet student/fwd.hpp GPUMemory
 * Vertex Shader má kromě vrcholů InVertex a OutVertex i vstup \ref ShaderInterface
 * \snippet student/fwd.hpp VertexShader
 * \snippet student/fwd.hpp ShaderInterface
 * Struktura ShaderInterface jednoduše odkazuje na tabulky uniformních proměnných a textur.

 * \subsubsection VertexPuller_Att Testy 14-16 - Vertex Atributy, Vertex Assembly jednotka
 * \code{.sh}
 * ./izgProject -c --test 14
 * ./izgProject -c --test 15
 * ./izgProject -c --test 16
 * \endcode
 * V tomto testu musíte naprogramovat funkcionalitu Vertex Assembly jednotky.<br>
 * <b>Vertex Assembly</b> (nebo taky Vertex Puller, Vertex Specification, ...) je zařízení na grafické kartě, které se stará o sestavení vrcholů.
 * \image html resources/images/vertexAssembly.svg "Vertex Assembly jednotka sestavuje vrcholy z paměti (většinou). K tomu potřebuje tabulka nastavení (VertexArray) a číslo vrcholu." width=800
 * Vertex není jen bod v prostoru.
 * Vertex je uživatelem specifikovaná struktura.
 * Uživatel může mít po vrcholech různé požadavky a tak do vrcholů může přidat různé množství attributů -- vertex attributů.
 * Kromě uživatelem specifikovaných atributů, obsahují i pevně vestavěné atributy (gl_VertexID a další).
 * \image html resources/images/vertex.svg "Vrchol je struktura dat. Ve struktuře jsou vertex attributy. Ty mívají uživatelem specifikovaný význam (třeba pozice, normála, ...). Vertex Assembly sestavuje InVertex, který je poslán jako vstup do vertex shaderu. OutVertex je výstup vertex shaderu." width=900
 * Sestavené vcholy jsou posílány do vertex shaderu pro zpracování uživetelem definovaným kódem.
 * Vertex shader transformuje vrcholy maticemi a vypočítává výstupní vrcholy.
 * \image html resources/images/vertexInOut.svg "Jsou dva typy vrcholů. Ty, které sestavuje jednotka Vertex Assembly a vstupují do vertex shaderu. A ty, které jsou výstupem vertex shaderu." width=400
 * Vrchol (\link InVertex \endlink) je složen z \link maxAttributes \endlink vertex attributů, každý může být různého typu (\link AttributeType \endlink (float, vec2, vec3, vec4, ...) a čísla vrcholu \ref InVertex::gl_VertexID.<br>
 * Struckura \ref InVertex vypadá takto:
 * \snippet student/fwd.hpp InVertex
 * Struktura \ref OutVertex vypadá takto:
 * \snippet student/fwd.hpp OutVertex
 * Obě struktury obsahují vertex atributy \ref Attribute
 * \snippet student/fwd.hpp Attribute
 * Vertex Assembly jednotka se řídí podle nastavení ze struktury VertexArray.
 * \image html images/pullerSettings.svg "Nastavení pro Vertex Assembly jednotku - VertexArray." width=800
 * Toto nastavení je uloženo ve struktuře VertexArray:
 * \snippet student/fwd.hpp VertexArray
 * Je složeno z nastavení pro indexování a nastavení pro vertex attributy.
 * VertexAttrib je struktura obsahují nastavení, jak číst jeden Vertex Attribut.
 * \snippet student/fwd.hpp VertexAttrib

 * Vertex Assembly jednotka je složena z \link maxAttributes \endlink čtecích hlav, které sestavují jednotlivé vertex attributy.
 * \link InVertex \endlink je složen z \link maxAttributes \endlink atributů, každý odpovídá jedné čtecí hlavě z Vertex Assembly jednotky.
 * Čtecí hlava obsahuje nastavení - offset, stride, type a buffer.
 * Pokud je čtecí hlava povolena (typ není empty), měla by zkopírovat data (o velikosti vertex atributu) z bufferu od daného offsetu, s krokem stride.
 * Všechny velikosti jsou v bajtech.
 * Krok se použije při čtení různých vrcholů: atributy by měly být čteny z adresy: buf_ptr + offset + stride*gl_VertexID
 * <br>
 * Na dalších dvou obrázcích je příklad stavu Vertex Assembly jednotky ve dvou (0. a 1.) invokaci vertex shaderu.
 * \image html images/puller0.svg "příklad vertex pulleru při 0. invokací vertex shaderu. Vertex je složen z 3 vertex atributů (coord, normal, position). Čtecí hlavy začínají na daných offsetech a v daných bufferech."
 * \image html images/puller1.svg "příklad vertex pulleru při 1. invokací vertex shaderu. Čtecí hlavy se posunuly o krok (stride)."
 * 
 * Po těchto úkolech byste měli mít hotovotou část před vertex shaderem.
 *
 *
 *
 * \subsection Raster 5. Úkol - naprogramovat Primitive Assembly jednotku, rasterizaci a pouštění fragment shaderu
 * V tomto úkolu je potřeba rozšířit funkcionalitu funkce izg_enqueue o schopnosti rasterizace.
 * Cílem je naprogramovat části zobrazovacího řetězce, které jsou za vertex shaderem po rasterizaci a pouštění fragment shaderu (včetně).<br>
 * Jedná se o testy 17. - 22.<br>
 * \subsubsection rasterPractice Teorie
 *
 * Vertex Assembly jednotka chrlí vrcholy a vertex shader je zpracovává, transformuje.
 * Je na čase z nich sestavit trojúhelníky a připravit je pro rasterizaci.
 * Část za vertex shaderem je složena z několika částí.
 * \image html resources/images/pipeline_after_vs.svg "Část za vertex shaderem je složena z několika jednotek. Je to jednotka sestavení primitiv (trojúhelníků), ořez (ten teď dělat nebudete), perspektivní dělení, viewport transformace, culling. Po vektorové části následuje rasterizace a fragment shader" width=800
 * <h3>Primitive Assembly</h3>
 * Primitive Assembly je jednotka, která sestavuje trojúhelníky (mimo jiné).
 * Trojúhelníku, úsečce, bodu se hromadně říká primitivum.
 * V tomto projektu se používají pouze trojúhelníky.
 * Primitive Assembly jednotka si počká na 3 po sobě jdoucí \ref OutVertex "výstupní vrcholy" z vertex shaderu a sestaví trojúhelník (struktura, která by měla obsahovat 3 výstupní vrcholy).
 * Lze na to také nahlížet tak, že primitive assembly jednotka dostane příkaz vykreslit třeba 4 trojúhelníky. Jednotka tak spustí vertex shader 12x, který takto spustí 12x vertex assembly jednotku.
 *
 * \image html images/PrimitiveAssembly.svg "Vizualizace funkce primitive assembly jednotky. Primitive assembly jednotka sestaví trojúhelník ze 3 po sobě jdoucích výstupních vrcholů z vertex shaderu." width=800

 * <h3>Perspektivní dělení</h3>
 * Perspektivní dělení následuje za clippingem (ten bude až později, teď není potřeba) a provádí převod z homogenních souřadnic na kartézské pomocí dělení w.
 * \image html images/PerspectiveDivision.svg "Perspektivní dělení. Převod z clip-space do NDC (normalized device coordinates). Dělí se pomocí w. Při tomto dělení vzniknou normalizované souřadnice x,y a normalizovaná hloubka." width=500
 *
 * <h3>Viewport transformace</h3>
 * Viewport transformace provádí převod NDC (rozsah -1, +1) na rozlišení okna, aby se mohla provést rasterizace.
 * \image html images/ViewportTransformation.svg "Vizualizace viewport transformace. Trojúhelníky jsou roztaženy na rozlišení obrazovky [width,height] do screen-space. Hloubka zůstane zachována v komponentě z." width=500
 *
 * <h3>Culling / Backface Culling</h3>
 * Backface Culling se stará o zahození trojúhelníků, které jsou odvráceny od pozorovatele.
 * Culling lze zapnout nebo vypnout pomocí: \ref DrawCommand::backfaceCulling.
 * Pokud je zapnutý, trojúhelníky, které jsou specifikovány po směru hodinových ručiček jsou zahazovány.
 * Pokud je vypnutý, vykreslují se všechny trojúhelníky - přivrácené i odvrácené - specifikované po i proti směru hodinových ručiček.
 * \image html images/backfaceCulling.svg "Levý trojúhelník je specifikovaný proti směru hodinových ručiček (counter clock wise) a je přivrácený k pozorovateli. Pravý je po směru (clock wise) a je odvrácený od uživatele. Levý se bude vždy vykreslovat, pravý pouze tehdy, pokud je back face culling vypnutý." width=500
 *
 * <h3> Rasterizace </h3>
 * Rasterizace rasterizuje trojúhelník ve screen-space.
 * Rasterizace produkuje fragmenty v případě, že <b>střed</b> pixelu leží uvnitř trojúhelníka.
 * \image html resources/images/rasterization.svg "Rasterizace produkuje fragmenty. Pokud střed pixelu leží uvnitř trojúhelníka, vytvoří se fragment." width=800

 * <h3> Fragment processor </h3>
 * Fragment processor spouští fragment shader nad každým fragmentem.
 * Data pro fragment shader jsou uložena ve struktuře \ref InFragment.
 * Výstup fragment shaderu je výstupní fragment \ref OutFragment - barva.
 * Další (konstantní) vstup fragment shaderu jsou uniformní proměnné a textury.
 * \image html images/FragmentShader.svg "Vizualizace vstupů a výstupů fragment shaderu. Fragment Shader se pouší nad každým vyrasterizovaným fragmentem." width=800
 *
 * Pseudokód může po upravení vypadat nějak takto:
 * \snippet student/drawExample.cpp izg_enqueue_after_vs

 *
 * \subsubsection raster_test Test 17 - Ověření, že rasterizace produkuje fragmenty
 * V tomto úkolu budete muset naprogramovat rasterizaci. Neobejdete se bez viewport transformace, rasterizace a zavolání fragment shaderu nad každným fragmentem.
 * Tento test spočívá ve zkoušení vyrasterizování několika různých trojúhelníků a počítání, kolik se vyrasterizovalo fragmentů.<br>
 * Testy pustíte:
 * \code{.sh}
 * izgProject -c --test 17
 * \endcode

 * \subsubsection pd_test Test 18 - Ověření, zda počítáte perspektivní dělení.
 * Tento test ověřuje, zda provádíte perspektivní dělení.
 * \code{.sh}
 * izgProject -c --test 18
 * \endcode

 * \subsubsection fragCoord_test Test 19 - Ověření, zda vyrasterizované fragmenty mají správnou 2D pozici.
 * Tento test ověřuje, zda vyrasterizované fragmenty mají správnou 2D pozici \ref InFragment::gl_FragCoord.
 * \code{.sh}
 * izgProject -c --test 19
 * \endcode
 * Fragmenty mají souřadnice středů pixelů, kterým náleží. Tzn. fragment pro levý dolní pixel [0,0] má souřadnice gl_FragCoord.xy = [0.5,0.5]

 * \subsubsection depthInterp_test Test 20 - Ověření, zda se správně interpoluje hloubka fragmentů.
 * Tento test ověřuje, zda vyrasterizované fragmenty mají správně interpolovanou hloubku.
 * \code{.sh}
 * izgProject -c --test 20
 * \endcode
 * Hloubka fragmentu je v komponentě "z" položky \ref InFragment::gl_FragCoord. Pro její interpolaci potřebujete hloubky vrcholů trojúhelníka a barycentrické souřadnice fragmentu ve 2D.<br>
 * Hloubky vrcholů najdete ve "z" komponentě položky \ref OutVertex::gl_Position gl_Position.z
 * \snippet student/fwd.hpp OutVertex
 * Hloubku zapisujte do komponenty "z" položky \ref InFragment::gl_FragCoord gl_FragCoord.z
 * \snippet student/fwd.hpp InFragment
 * Barycentrické souřadnice musíte spočítat podle obsahů:
 * \image html resources/images/barycentric2D.svg "Barycentrické souřadnice ve 2D jsou spočítány jako poměry obsahů podtrojúhelníků." width=800
 * Hlouba se interpoluje pomocí barycentrických souřadnic ve 2D:
 * \f[\displaystyle fragment.gl\_FragCoord.z = vertex[0].gl\_Position.z\cdot \lambda_0^{2D} + vertex[1].gl\_Position.z\cdot \lambda_1^{2D} + vertex[2].gl\_Position.z\cdot \lambda_2^{2D}\f]
 * Hloubka vrcholů vertex[].gl_Position.z vznikla při perspektivním dělení.

 * \subsubsection attInterp_test Testy 21-22 - Ověření, zda se správně interpolují vertex attributy.
 * Tyto dva testy ověřují, jestli se správně interpolují vertex atributy do fragment atributů.
 * \code{.sh}
 * izgProject -c --test 21
 * izgProject -c --test 22
 * \endcode
 * Vertex Attributy jsou se struktuře OutVertex
 * \snippet student/fwd.hpp OutVertex
 * A ze tří těchto vrcholů by se měly interpolovat atributy InFragment.
 * \snippet student/fwd.hpp InFragment
 * Interpolujte pouze ty atributy, které jsou poznačené v položce \ref Program::vs2fs!
 * A pouze ty, které nejsou typu integer!
 * Integerové atributy neinterpolujte, ale pouze použijte hodnoty nultého vrcholu. Tomuto vrcholu se také říká provoking vertex.
 * \snippet student/fwd.hpp Program
 * Atributy je potřeba interpolovat pomocí perspektivně korektně upravených barycentrických souřadnic.
 * Perspektivně korektní interpolace:
 * \f[\displaystyle \frac{\frac{A_0 \cdot \lambda_0^{2D}}{h_0} + \frac{A_1 \cdot \lambda_1^{2D}}{h_1} + \frac{A_2 \cdot \lambda_2^{2D}}{h_2}}{\frac{\lambda_0^{2D}}{h_0}+\frac{\lambda_1^{2D}}{h_1}+\frac{\lambda_2^{2D}}{h_2}}\f]
 * Kde \f$\lambda_0^{2D},\lambda_1^{2D},\lambda_2^{2D}\f$ jsou barycentrické koordináty ve 2D, \f$h_0,h_1,h_2\f$ je homogenní složka vrcholů a \f$A_0,A_1,A_2\f$ je atribut vrcholu.<br>
 * Homogenní složka vrcholů je čtvrtá složka - tím čím se dělilo ve perspektivním dělení: h0 = vertex[0].gl_Position.w, h1 = vertex[1].gl_Position.w, ...
 * <br>
 * Barycentrické souřadnice je možné přepočítat na perspektivně koretní barycentrické souřadnice (je to jen přepsání zvorečku nahoře):
 * \f[\displaystyle s = \frac{\lambda_0^{2D}}{h_0}+\frac{\lambda_1^{2D}}{h_1}+\frac{\lambda_2^{2D}}{h_2}\f]
 * \f[\displaystyle \lambda_0 = \frac{\lambda_0^{2D}}{h_0\cdot s}\f]
 * \f[\displaystyle \lambda_1 = \frac{\lambda_1^{2D}}{h_1\cdot s}\f]
 * \f[\displaystyle \lambda_2 = \frac{\lambda_2^{2D}}{h_2\cdot s}\f]
 * Ty je potom možné použít pro interpolaci atributů:
 * \f[\displaystyle fragment.attribute = vertex[0].attribute\cdot \lambda_0 + vertex[1].attribute\cdot \lambda_1 + vertex[2].attribute\cdot \lambda_2\f]
 * \image html resources/images/interpolation.svg "Rasterizace a interpolace vertex atributů. Vertex Atributy jsou interpolovány pomocí perspektivně korektních barycentrických souřadnic l0,l1,l2." width=800
 *
 *
 *
 * \subsection pfo 6 Úkol - naprogramovat per fragment operace a zápis do framebufferu.
 * Rastrovou část zobrazovacího řetězce už byla částečně nakousnutá v předcházejícím úkolu (byl volán fragment shader).
 *
 * \subsubsection pfoTheory Teorie
 * Rastrová část vypadá takto:
 * \image html resources/images/pipeline_raster.svg "Rastrová část je složena z fragment shaderu a per fragment operací. Jsou dvě PFO operace: hloubkový test a blending. Fragmenty se poté přimíchají do framebufferu." width=800
 * Mezi Per-fragment operace (PFO) patří:
 * <ul>
 * <li> discarding - zahazování fragmentů,
 * <li> hloubkový test (depth test),
 * <li> blending - pro průhledné objekty.
 * </ul>
 * 
 * PFO využívají informace z \ref Framebuffer, \ref InFragment::gl_FragCoord, \ref OutFragment::gl_FragColor, \ref OutFragment::discard.
 * \snippet student/fwd.hpp OutFragment
 * \snippet student/fwd.hpp InFragment
 * \snippet student/fwd.hpp Framebuffer
 *
 * <h3> Discrading </h3>
 * Operace discard neboli zahazování fragmentů fragment zahodí.
 * V takovém případě se nezapíše ani barva ani hloubka do framebufferu.
 * Discarding se používá hojně, například v třetím Zaklínačovi jej používají pro zprůhlednění křoví.
 *
 * <h3> Hloubkový test </h3>
 * Hloubkový test je jedna z per fragment operací.
 * Stará se o zahazování fragmentů, které jsou hlouběji než to, co už se vyrasterizovalo.
 * Využívá k tomu hloubkový buffer.
 * Hloubka fragmentu je "z" komponenta \ref InFragment::gl_FragCoord InFragment::gl_FragCoord.z.
 * Pokud je hloubka nového fragment menší, je jeho barva a hloubka zapsána do framebufferu.
 * Dejte pozor na přetečení rozsahu \ref OutFragment::gl_FragColor. Před zápisem je nutné ořezat barvu do rozsahu <0,1> a pak převést na správný typ.
 * \image html images/PFO.svg "Vizualizace depth testu. Starý fragment (jeho barva a hloubka) je nahrazen pokud má nový fragment menší hloubku." width=800
 *
 * <h3> Blending </h3>
 * Blending je PFO operace, která místo toho, aby barvu ve framebuffer přepsala novou barvou fragmentu, tak ji smíchá.
 * Blending má v reálu mnoho nastavení, v projetku se používá pouze alpha blending.<br>
 * Fragmenty mají barvu RGBA, kde A - \f$\alpha\f$ je tzv. neprůhlednost.<br>
 * Pokud má nový fragment \f$\alpha=1\f$ - je absolutně neprůhledný - plně přepíše barvu ve framebufferu, když projde hloubkovým testem.<br>
 * Pokud má nový fragment \f$\alpha=0\f$ - je absolutně průhledný - vůbec barvu ve framebuffer nezmění, i když projde hloubkovým testem.<br>
 * Pokud má hodnotu někde mezi, tak se barva lineárně smíchá:
 * \f[\displaystyle colorBuffer_{rgb} = colorBuffer_{rgb} \cdot (1-\alpha) + gl\_FragColor_{rgb} \cdot \alpha\f]
 * Kde \f$\alpha=gl\_FragColor_a\f$
 *
 * K per fragment operacím se vážou testy 23. - 27.
 * \subsubsection pfo_test Testy 23-27 - Per-fragment operace
 * Tyto testy ověřují, jestli se správně provádí per fragment operace a zápis do framebufferu.
 * \code{.sh}
 * izgProject -c --test 23
 * izgProject -c --test 24
 * izgProject -c --test 25
 * izgProject -c --test 26
 * izgProject -c --test 27
 * \endcode
 * Upravený pseudokód funkce může vypadat takto:
 * \snippet student/drawExample.cpp izg_enqueue_pfo
 *
 * Pokud to všechno budete mít hotové, mělo by vám začít fungovat zobrazování. Jestli ano, gratuluji. Máte první část hotovou.<br>
 *
 * \subsection clip 7. Úkol - naprogramovat ořez trojúhelníků blízkou ořezovou rovinou
 * Tento úkol opravuje vykreslování pokud je geometrie za pozorovatelem.<br>
 * Tyto úkoly můžete přeskočit a vrátit se k nim později. Pokud se na geometrii budete dívat tak, že leží vždy před vámi, nepoznáte rozdíl.<br>

 * \subsubsection ClippingTheory Teorie
 * Ořez (clipping) slouží pro odstranění částí trojúhelníků, které leží mimo pohledový jehlan.
 * Nejdůležitější je však ořez near ořezovou rovinou pohledoveho jehlanu.
 * Pokud by se neprovedl ořez pomocí near roviny, pak by se vrcholy nebo i celé trojúhělníky, které leží za středem projekce promítly při perspektivním dělení na průmětnu.
 * Ořez se provádí v clip-space - po Primitive Assembly jednotce.
 * Pro body, které leží uvnitř pohledového tělesa platí, že jejich souřadnice splňují následující nerovnice: \f$ -A_w \leq A_i \leq +A_w \f$, \f$i \in \left\{ x,y,z \right\}\f$.
 * Těchto 6 nerovnic reprezentuje jednotlivé svěny pohledového jehlanu.
 * Nerovnice \f$ -A_w \leq A_z \f$ reprezentuje podmínku pro near ořezovou rovinu.
 * <br>
 * Při ořezu trojúhelníku můžou nastat 4 případy, jsou znázorněny na následujícím obrázku:
 *
 * \image html resources/images/clip_variants.svg "4 varianty ořezu trojúhelníku pomocí near roviny. Počet vrcholů, které leží před ořezovou rovinou určuje typ ořezu. Při ořezu může vzniknout 0 až 2 nové trojúhelníky."
 *
 * Ořez trojúhelníku pomocí near roviny lze zjednodušit na ořez hran trojúhelníku.
 * Bod na hraně (úsečce) trojúhelníku lze vyjádřit jako: \f$ \overrightarrow{X(t)} = \overrightarrow{A} + t \cdot (\overrightarrow{B}-\overrightarrow{A}) \f$, \f$t \in [0,1] \f$.
 * \f$ \overrightarrow{A}, \overrightarrow{B} \f$ jsou vrcholy trojúhelníka, \f$ \overrightarrow{X(t)} \f$ je bod na hraně a parametr \f$ t \f$ udává posun na úsečce.
 *
 * \image html resources/images/clip.svg "Ořez trojúhelníku pomocí ořezu hran. Při ořezu hran vzniknou nové body, ze kterých jsou následně sestaveny nové trojúhelníky."
 *
 * Souřadnice bodu \f$ \overrightarrow{X(t)} \f$ lze určit při vypočtení parametru \f$ t \f$, při kterém přestane platit nerovnice pro near rovinu \f$ -X(t)_w \leq X(t)_z \f$.
 * Takové místo nastává v situaci \f$ -X(t)_w = X(t)_z \f$.
 * Po dosazení z rovnice úsečky lze vztah přepsat na: 
 * \f{eqnarray*}{
 * -X(t)_w &=& X(t)_z \\
 * 0 &=& X(t)_w + X(t)_z \\
 * 0 &=& A_w + t \cdot (B_w-A_w) + A_z + t \cdot (B_z - A_z) \\
 * 0 &=& A_w + A_z + t \cdot (B_w-A_w+B_z-A_z) \\
 * -A_w-A_z &=& t \cdot (B_w-A_w+B_z-A_z) \\
 * \frac{-A_w - A_z}{B_w-A_w+B_z-A_z} &=& t\\
 * \f}
 *
 * Pozice bodu \f$ \overrightarrow{X(t)} \f$ a hodnoty dalších vertex atributů lze vypočítat lineární kombinací hodnot z vrcholů úsečky pomocí parametru \f$ t \f$ následovně: \f$ \overrightarrow{X(t)} = \overrightarrow{A} + t \cdot (\overrightarrow{B}-\overrightarrow{A}) \f$.
 *
 *
 * \subsubsection clippingPractice Testy 28-31 - ořez
 * Testy, které testují ořez jsou 28. - 31.
 * \code{.sh}
 * izgProject -c --test 28
 * izgProject -c --test 29
 * izgProject -c --test 30
 * izgProject -c --test 31
 * \endcode
 * Pseudokód ořezu může vypadat takto:
 * \snippet student/drawExample.cpp izg_enqueue
 *
 * Pokud budete mít ořez hotový, dokončili jste implementaci grafické karty!
 * Byla to fuška, ale věřte, že skutečné grafické karty jsou alespoň milionkrát složitější.
 * Takto vypadá celý vykreslovací řetězec:
 *
 * \image html images/rendering_pipeline.svg "Simplified rendering pipeline"
 * Měly by vám fungovat příklady, které nevyžadují načítání modelů:
 * \image html images/examples.svg "příklady" width=1000
 * Další úkoly jsou zaměřené už na vykreslování modelů s využitím stínů.
 *
 *
 *
 *
 *
 * \section drawModelSec Implementace vykreslování modelů se stíny - soubor student/prepareModel.cpp
 * Druhá věc, co se asi ptáte je: "K čemu se dá grafická karta využít?"
 * Cílem této části projektu je vykreslit modely se stíny pomocí vámi vytvořené grafické karty.
 * Všechny úkoly této části se týkají souboru student/prepareModel.cpp.
 *
 * \subsection drawModel_fce 8. Úkol - Vykreslování modelů - funkce prepareModel
 * Tento úkol už se neváže k zobrazovacímu řetězci, ale k jeho využívání.
 * Cílem je naprogramovat zobrazování modelů načtených ze souboru na disku.
 * Načítání modelů už je uděláno a předpřipraveno.
 * Vaším úkolem je jen správně vytvořit command buffer a zapsat správně data do grafické karty.
 * Budete editovat funkci \ref prepareModel v souboru \ref student/prepareModel.cpp.
 * Samotné volání kreslení nebudete dělat, připravujete command buffer a paměť, které zpracuje příklad modelMethod.cpp.<br>
 * Struktura modelu je:
 * \image html resources/images/model.svg "Model je složen ze 4 polí: pole kořenů, pole meshu, pole bufferů a pole textur. Kořen je uzel, který může mít potomky a může se odkazovat na mesh. Mesh obsahuje nastavení pro DrawCommand a může se odkazovat na texturu a buffery."
 * Vážou s k němu struktury Model, Node, Mesh, Buffer, Texture.
 * \snippet student/fwd.hpp Model
 * \snippet student/fwd.hpp Node
 * \snippet student/fwd.hpp Mesh
 * \snippet student/fwd.hpp Buffer
 * \snippet student/fwd.hpp Texture
 * Pro správné vytvoření command bufferu je potřeba projít kořeny modelu a vložit všechny uzly, které mají mesh. Procházejte stromy průchodem
 * <a href="https://en.wikipedia.org/wiki/Tree_traversal">pre order</a>.
 * Uzly se mohou odkazovat na mesh nebo nemusí (pokud je mesh=-1).<br>
 * Mesh se může odkazovat na texturu nebo nemusí (pokud je diffuseTexture=-1).<br>
 * V zásadě jde o to ke každému uzlu, ve kterém je odkaz na mesh, vytvořit DrawCommand a vložit jej do CommandBuffer a vytvořit VertexArray a vložit jej do paměti grafické karty GPUMemory.<br>
 * Je potřeba správně spočítat modelové matice, které se budují postupný pronásobováním z kořenového uzlu.<br>
 * Vytvoření command bufferu lze napsat s výhodou rekurzivně.
 * Pseudokód možné implementace:
 * \snippet student/drawExample.cpp prepareModel
 * Příklad, jak připravit command buffer, můžete najít v souboru examples/phongMethod.cpp
 * \snippet examples/phongMethod.cpp PhongMethod
 * K tomuto úkolu se vážou testy 32. až 45
 * \code{.sh}
 * ./izgProject -c --test 32
 * ./izgProject -c --test 33
 * ...
 * ./izgProject -c --test 45
 * \endcode
 *
 * \subsubsection modelTraverse Testy 32-37 - Průchod modelem
 * Testy 32. - 37. kontrolují, jestli správně vytváříte command buffer.
 *
 * \subsubsection modelMemory Testy 38-35 - paměť
 * Testy 38. - 35. kontrolují, jestli správně plníte paměť grafické karty.
 *
 *
 *
 * \subsection drawModel_vs 9. Úkol - Vykreslování modelů - vertex shader drawModel_vertexShader
 * Funkce \ref drawModel_vertexShader reprezentuje vertex shader pro zobrazení modelů.<br>
 * Jeho funkcionalita spočívá v transformování vrcholů pomocí matic.<br>
 * Vstupem jsou vrcholy, které mají pozici (3f), normálu (3f) a texturovací souřadnice (2f) (atributy 0, 1 a 2).<br>
 * Vertex Attributy InVertex:
 * <ul>
 * <li> inVertex.attributes[0].v3 - pozice vertexu v model-space
 * <li> inVertex.attributes[1].v3 - normála vertexu v model-space
 * <li> inVertex.attributes[2].v2 - tex. koordináty
 * </ul>
 * Výstupem jsou vrcholy, které mají pozici (3f) a normálu (3f) ve world space, texturovací souřadnice (2f) a pozici vrcholu v clip-space světla (4f) (atributy 0, 1, 2, 3).<br>
 * Vertex Attributy OutVertex:
 * <ul>
 * <li> outVertex.attributes[0].v3 - pozice vertexu ve world-space
 * <li> outVertex.attributes[1].v3 - normála vertexu ve world-space
 * <li> outVertex.attributes[2].v2 - tex. koordináty
 * <li> outVertex.attributes[3].v4 - pozice vertexu v clip-space světla.
 * </ul>
 * Uniformní proměnné obsahují projectionView matici, modelovou matici, a inverzní transponovanou matici.<br>
 * Uniformní proměnné Uniforms:
 * <ul>
 * <li> si.uniforms[0].m4                - cameraProjectionView projekční a view matice kamery
 * <li> si.uniforms[3].m4                - lightProjectionView projekční a view matice světla - pro stíny
 * <li> si.uniforms[10+gl_DrawID*5+0].m4 - modelová matice
 * <li> si.uniforms[10+gl_DrawID*5+1].m4 - inverzní transponovaná matice
 * <li> s.gl_DrawID                      - číslo vykreslovacího příkazu
 * </ul>
 *
 * Pozice by se měla pronásobit modelovou maticí "m*glm::vec4(pos,1.f)", aby se ztransformovala do world-space.<br>
 * Normála by se měla pronásobit inverzní transponovanou modelovou maticí "itm*glm::vec4(nor,0.f)" aby se dostala do world-space.<br>
 * Texturovací souřadnice se pouze přepošlou.<br>
 * Pozice vrcholu gl_Position by měla být vypočtena pronásobením cameraProjectionView*model*pos.<br>
 * Pozice vrcholu v prostoru clip-space prostoru světla pro stíny by se měla vypočítat lightProjectionView*model*pos.<br>
 * K tomuto úkolu se váže tests 46.
 * \code{.sh}
 * izgProject -c --test 46
 * \endcode

 * \subsection drawModel_fs 10. Úkol - Vykreslování modelů - fragment shader drawMode_fragmentShader
 * Funkce \ref drawModel_fragmentShader reprezentuje fragment shader pro zobrazení modelů.<br>
 * Jeho funkcionalita spočívá v obarvování fragmentů, počítání lambertova osvětlovacího modelu a výpočtu stínu.<br>
 * Vstupem jsou fragmenty, které mají: pozici (3f), normálu (3f), texturovací souřadnice (2f) a pozici v clip-space prostoru světla pro čtení ze stínové mapy. (atributy 0,1,2,3).<br>
 * Fragment Attributy InFragment:
 * <ul>
 * <li> inFragment.attributes[0].v3 - pozice fragmentu ve world-space
 * <li> inFragment.attributes[1].v3 - normála fragmentu ve world-space
 * <li> inFragment.attributes[2].v2 - tex. koordináty
 * <li> inFragment.attributes[3].v4 - pozice fragmentu v clip-space světla pro adresaci stínové mapy a výpočet stínu
 * </ul>
 * Výstupem je fragment s barvou a správnou průhledností \f$\alpha\f$.

 * Uniformní proměnné obsahují pozici světla (3f), pozici kamery (3f), difuzní barvu (4f), číslo textury (1i) a příznak doubleSided (1f).<br>
 * Vzhledem k tomu, že má každý mesh jinou texturu a jiné nastavení, je nutné najít správné textury podle gl_DrawID.<br>
 * Uniformní proměnné Uniforms:
 * <ul>
 * <li> si.uniforms[1].v3 - pozice světla ve world-space
 * <li> si.uniforms[2].v3 - pozice kamery ve world-space
 * <li> si.uniforms[6].i1 - číslo textury, která obsahuje stínovou mapu, nebo -1 pokud stíny nejsou
 * <li> si.uniforms[7].v3 - barva ambientního světla
 * <li> si.uniforms[8].v3 - barva světla
 * <li> si.uniforms[10+gl_DrawID*5+2].v4 - difuzní barva
 * <li> si.uniforms[10+gl_DrawID*5+3].i1 - číslo textury nebo -1 pokud textura není
 * <li> si.uniforms[10+gl_DrawID*5+4].v1 - příznak doubleSided (1.f pokud je, 0.f pokud není)
 * </ul>
 * Vstupní normálu byste měli znormalizovat N=glm::normalize(nor).<br>
 * Difuzní barva materiálu je buď uložena v uniformní proměnné nebo v textuře.<br>
 * Rozhoduje se podle toho, jestli je čístlo textury záporné nebo ne.<br>
 * Pokud je nastaven příznak doubleSided (je > 0), jedná se o doustraný povrch. <br>
 * V takovém případě je nutné otočit normálu, pokud je otočená od kamery (využijte pozici kamery v uniformní proměnné). <br>
 * Spočítejte lambertův osvětlovací model se stíny pomocí shadow mappingu. <br>
 * Spočítejte, zda je fragment ve stínu. <br>
 * K tomu je potřeba vyčíst hloubku ze stínové mapy a porovnat ji se vzdáleností ke světlu.<br>
 * Testy vás povedou.<br>
 * K tomuto úkolu se váže testy 47-51.
 * \code{.sh}
 * izgProject -c --test 47
 * izgProject -c --test 48
 * izgProject -c --test 49
 * izgProject -c --test 50
 * izgProject -c --test 51
 * \endcode
 *
 * Ukázka, jak se počítá celý shadow mapping je v souboru:
 * \snippet examples/shadowMapping.cpp ShadowMapping
 * Není třeba jej opisovat, vše je v podstatě uděláno, jen shadery můžete použít jako inspiraci.
 *
 *
 * \subsection finalCountDown 11. Úkol - finální render
 * \code{.sh}
 * izgProject -c --test 52
 * \endcode
 *
 * A je to! Gratuluji k vypracování celého projektu. Děkuji, že jste jej vypracovali celý.
 * Teď by vám mělo fungovat vše.
 * \image html resources/images/vystup.png
 * \image html resources/images/anim.png
 * \image html resources/images/korea.png
 *
 * \section rozdeleni Rozdělení souborů a složek
 *
 * Projekt je rozdělen do několika podsložek:
 *
 * <b>student/</b> Tato složka obsahuje soubory, které využijete při
 * implementaci projektu.
 * Složka obsahuje soubory, které budete odevzávat a podpůrné hlavičkové soubory.
 *
 * <b>examples/</b> Tato složka obsahuje přiložené příklady, které využívají vámi vytvořené zobrazovadlo.
 *
 * <b>tests/</b> Tato složka obsahuje akceptační a performanční testy projektu.
 * Akceptační testy jsou napsány s využitím knihovny catch.
 * Testy jsou rozděleny do testovacích případů (TEST_CASE). Daný TEST_CASE
 * testuje jednu podčást projektu.
 *
 * <b>libs/</b> Tato složka obsahuje pomocné knihovny
 * <b>framework/</b> Tato složka obsahuje interní záležitosti projektu.
 * Všechny soubory jsou napsány v C++, abyste se mohli podívat, jak to funguje.
 *
 * <b>doc/</b> Tato složka obsahuje doxygen dokumentaci projektu.
 * Můžete ji přegenerovat pomocí příkazu doxygen spuštěného v root adresáři
 * projektu.
 *
 * <b>resources/</b> Tato složka obsahuje modely a obrázky.
 *
 * <b>build/</b> Tady se čeká, že si budete sestavovat projekt, ale není to nutné, pokud víte, co děláte...
 *
 * Složka student/ obsahuje soubory, které se vás přímo týkají:
 *
 * \ref gpu.cpp obsahuje definici funkce představující funkcionalitu grafické karty \ref izg_enqueue - tady odvedete nejvíce práce.
 *
 * \ref prepareModel.cpp obsahuje definici funkce pro zpracování modelu \ref prepareModel a vertex a fragment shaderu \ref drawModel_vertexShader \ref drawModel_fragmentShader - toto máte taky naprogramovat.
 *
 * \ref fwd.hpp obsahuje definice typů a konstanty - projděte si.
 *
 * Projekt je postaven nad filozofií OpenGL/Vulkan.
 *
 * \section sestaveni Sestavení
 *
 * Projekt byl testován na Ubuntu 20.04, Visual Studio 2017, 2019.
 * Projekt vyžaduje 64 bitové sestavení.
 * Projekt využívá build systém <a href="https://cmake.org/">CMAKE</a>.
 * CMake je program, který na základně konfiguračních souborů "CMakeLists.txt"
 * vytvoří "makefile" v daném vývojovém prostředí.
 * Dokáže generovat makefile pro Linux, mingw, solution file pro Microsoft
 * Visual Studio, a další.<br>
 * Postup Linux:
 * \code{.sh}
 * # stáhnout projekt
 * unzip izgProject.zip -d izgProject
 * cd izgProject/build
 * cmake ..
 * make -j8
 * ./izgProject
 * ./izgProject -h
 * \endcode
 * Posup na Windows:
 * -# stáhnout projekt
 * -# rozbalit projekt
 * -# jděte do složky build/ 
 * -# ve složce build pusťte cmake-gui ..
 * -# pokud nevíte jak, tak pusťte cmake-gui a nastavte "Where is the source code:" na složku s projektem (obsahuje CMakeLists.txt)
 * -# a "Where to build the binaries: " na složku build
 * -# configure
 * -# generate
 * -# Otevřete vygenerovnou Microsoft Visual Studio Solution soubor.
 *
 * \section spousteni Spouštění
 *
 * Projekt je možné po úspěšném přeložení pustit přes aplikaci
 * <b>izgProject</b>.
 * Projekt akceptuje několik argumentů příkazové řádky, pro jejich výpis použijte parametr <b> -h </b>
 * - <b>-c</b> spustí akceptační testy.
 * - <b>-c -g CESTA_NEKAM/izgProject/resources/images/output.png</b> spustí akceptační cesty (pouze pokud jste si někam nešikovně přesunuli soubory...)
 * - <b>-p</b> spustí performanční test. (vhodné až pokud aplikaci zkompilujete v RELEASE)
 * Vyzkoušejte si
 * \code{.sh}
 * ./izgProject -p
 * \endcode
 *
 * \section ovladani Ovládání
 * Aplikace se ovládá pomocí myši a klávesnice:
 * - stisknuté levé tlačítko myši + pohyb myší - rotace kamery
 * - stisknuté pravé tlačítko myši + pohyb myší - přiblížení kamery
 * - stiknuté prostření tlačítko myši + pohyb myší - posun kamery do boků
 * - "n"   - přepne na další scénu/metodu
 * - "p"   - přepne na předcházející scénu/metodu
 * - "esc" - konec
 *
 * \section testovani Testování
 * Vaši implementaci si můžete ověřit sadou vestavěných akceptačních testů.
 * Když aplikaci pustíte s parametrem "-c", pustí se akceptační testy, které ověřují funkčnost vaší implementace.
 * \code{.sh}
 * ./izgProject -c
 * \endcode
 * Pokud není nějaký test splněn, vypíše se k němu komentář s informacemi, co je špatně.
 * Testy jsou seřazeny a měly by se plnit postupně.
 * Pokud chcete pustit jeden konkrétní test (třeba 13.), pusťte aplikaci s parametry "-c --test 13".
 * \code{.sh}
 * ./izgProject -c --test 13
 * \endcode
 * Pokud chcete pustit všechny testy až po jeden konkrétní (třeba 5.), pusťte aplikaci s parametry "-c --up-to-test --test 5".
 * \code{.sh}
 * ./izgProject -c --test 5 --up-to-test
 * \endcode
 * To je užitečné, když implementujete sekci, a chcete vědět, jestli jste něco zpětně nerozbili.<br>
 * Na konci výpisu testů se vám vypíše bodové hodnocení.
 *
 * \section odevzdavani Odevzdávání
 *
 * Odevzdejte <b>proj.zip</b>, který obsahuje jen soubory gpu.cpp a prepareModel.cpp, žádné složky.<br>
 * Můžete odevzdat částečné řešení, hodnotí se to, co jste odevzdali a kolik bodů vám to vypočetlo.<br>
 *
 * Před odevzdáváním si zkontrolujte, že váš projekt lze přeložit na merlinovi.<br>
 * Pro ověření kompilace nemusíte na merlin kopírovat složku resources (je velká).<br>
 * Pokud si chcete na merlinovi ověřit i akceptační testy stačí zkopírovat jen resources/images/output.png a resources/models/fin.glb.<br>
 * Zkopirujte projekt na merlin a spusťte skript: <b>./merlinCompilationTest.sh</b>.<br><br>
 * Odevzdávejte pouze soubory gpu.cpp, prepareModel.cpp
 * Soubory zabalte do archivu proj.zip. Po rozbalení archivu
 * se <b>NESMÍ</b> vytvořit žádná složka. Příkazy pro ověření na Linuxu: zip
 * proj.zip gpu.cpp prepareModel.cpp, unzip proj.zip.
 * Studenti pracují na řešení projektu samostatně a každý odevzdá své vlastní
 * řešení.
 * Poraďte si, ale řešení vypracujte samostatně! Žádné kopírování kódu!
 * Nedávejte svůj projekt veřejně na github, gitlab, soureforge, pastebin, discord nebo jinam, tím se automaticky stávate plagiátory.<br>
 * Neposílejte svým kamarádům kódy. Možná jim věříte, že to neokopírují, ale divili byste se. Pak byste se dostali mezi plagiátory.
 *
 * \section chyby Časté chyby, které nedělejte
 * <ol>
 * <li> student se mě nezeptá pokud neví, jak něco vyřešit. Ptejte se. Odpovím, pokud budu vědět.
 * <li> student neodevzdá korektně zabalené soubory.
 * <li> student si inkluduje nějake soubory z windows, třeba windows.h - to nedělejte, překlad musí fungovat na merlinovi.
 * <li> student si přibalí nějaké náhodné soubory s MAC - to nedělejte, překlad musí fungovat na merlinovi.
 * <li> min, max funkce si berete odnikud - vyzkoušejte, jestli vám jde překlad na merlinovi, nebo použijte glm::min, glm::max
 * <li> špatně pojmenovaný archiv při odevzdávání
 * <li> soubory navíc, nebo přejmenované soubory v odevzdaném archivu
 * <li> memory corruption, přistupujete do paměti, kam nemáte (na to je valgrind)
 * <li> student odevzdá soubory v nějakém exotickém archivu, rar, tar.gz, 7z, iso...
 * <li> student zkouší projekt na systemu, který nebyl ověřen (ověřeno to bylo na Linuxu, Windows by měl běžet, ale ...).
 * <li> VirtualBox s Ubuntu je +- možný, ale může se narazit na SDL chybu no video device (asi je potřeba nainstalovat SDL: sudo apt install xorg-dev libx11-dev libgl1-mesa-glx).
 * <li> Nějaký problém se CMake a zprovoznením překladu na Windows (většinou je problém s cestami, zkuste dát projekt někam do jednoduché složky C:\).
 * <li> Projekt máte příliš pomalý a tak jej automatické testy předčasně utnou.
 * </ol>
 *
 * \section hodnoceni Hodnocení
 *
 * Množství bodů, které dostanete, je odvozeno od množství splněných
 * akceptačních testů a podle toho, zda vám to kreslí správně (s jistou
 * tolerancí kvůli nepřesnosti floatové aritmetiky).
 * Automatické opravování má k dispozici větší množství akceptačních testů
 * (kdyby někoho napadlo je obejít).
 * Pokud vám aplikace spadne v rámci testů, dostanete 0 bodů.
 * Pokud aplikace nepůjde přeložit, dostanete 0 bodů.
 *
 * \section soutez Soutěž
 *
 * Pokud váš projekt obdrží plný počet bodů, bude zařazen do soutěže o
 * nejrychlejší implementaci zobrazovacího řetězce.
 * Můžete přeimplementovat cokoliv v odevzdávaných souborech pokud to projde
 * akceptačními testy a kompilací.<br>
 * Spuštění měření výkonnosti:
 * \code{.sh}
 * ./izgProject -p -f 10
 * \endcode
 * Nejrychlejší projekty budou na věčné časy zařazeny do <a href="https://www.fit.vutbr.cz/~imilet/shared/sinSlavy/">síně slávy</a>. A...<br>
 * <b>Ceny za 1., 2. a třetí místo v roce 2023 byly:</b> <br>
 * \image html resources/images/plague.png
 * \image html resources/images/hellblade.png
 * \image html resources/images/pillars.png

 * <b>Cena za nejrychlejší projekt v roce 2024 bude:</b> <br>
 * ????
 *
 * \section zaver Závěrem
 * Ať se dílo daří a ať vás grafika alespoň trochu baví!
 * V případě potřeby se nebojte zeptat (napište přímo vedoucímu projektu imilet@fit.vutbr.cz nebojte se napsat, nekoušu.
 */
